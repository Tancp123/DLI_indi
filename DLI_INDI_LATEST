{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMlxoqkqg2rk1XedCeGGYoU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"zqtT2cF-z5l3"},"outputs":[],"source":["import warnings\n","warnings.filterwarnings('ignore')\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pylab as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","import tensorflow as tf\n","import keras_tuner as kt\n","from tensorflow.keras.layers import Dense, Input, BatchNormalization, Concatenate, Activation\n","from tensorflow.keras.metrics import Recall, Precision, AUC\n","from tensorflow.keras.utils import to_categorical"]},{"cell_type":"code","source":["def down_cast(df: pd.DataFrame):  #data frame optimization\n","    int8_min, int8_max = -128, 127\n","    int16_min, int16_max = -32768, 32767\n","    int32_min, int32_max = -2147483648, 2147483647\n","\n","    cols = df.columns\n","    for col in cols:\n","        if df[col].dtype == 'int64':\n","            min_val = df[col].min()\n","            max_val = df[col].max()\n","\n","            if (min_val == 0) and (max_val == 0):\n","                df = df.drop(columns=col)\n","                continue\n","\n","            if min_val >= int8_min and max_val <= int8_max:\n","                df[col] = df[col].astype('int8')\n","            elif min_val >= int16_min and max_val <= int16_max:\n","                df[col] = df[col].astype('int16')\n","            elif min_val >= int32_min and max_val <= int32_max:\n","                df[col] = df[col].astype('int32')\n","            else:\n","                pass\n","\n","        elif (df[col].dtype == 'O') and (df[col].nunique() < 5):\n","            df[col] = df[col].astype('category')\n","\n","    return df\n","\n","#reduced from 25MB to 10MB"],"metadata":{"id":"BqDY8Y6Wz9DO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('MalwareMemoryDump.csv', usecols=lambda column: column != 'Raw_Type')"],"metadata":{"id":"1lE23kwRz9Jm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = down_cast(df)"],"metadata":{"id":"k0_y3bQKz9L5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["info = pd.concat([df.describe(include=np.number), pd.DataFrame(df.dtypes).T. \\\n","                  rename(index={0: 'dtype'}).drop(columns=['SubType', 'Label'])])"],"metadata":{"id":"3RBNybAYz9OF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['Label'] = df['Label'].map({'Benign': 0, 'Malware': 1})\n","df['SubType'] = df['SubType'].map({'Benign': 0, 'Ransomware': 1, 'Spyware': 2, 'Trojan': 3})"],"metadata":{"id":"EWshOxujz9QQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Label_dict = {0: 'Benign', 1: 'Malware'}\n","subtype_dict = {'Benign': 0, 'Ransomware': 1, 'Spyware': 2, 'Trojan': 3}"],"metadata":{"id":"N8cOJfJvz9SY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train, x_test = train_test_split(df, test_size=.17, stratify=df[['SubType', 'Label']],\n","                                    random_state=42)"],"metadata":{"id":"cFRTOq_6z9U4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train_feats = x_train.drop(columns=['SubType', 'Label'])\n","x_test_feats = x_test.drop(columns=['SubType', 'Label'])\n","y_train = x_train[['SubType', 'Label']]\n","y_test = x_test[['SubType', 'Label']]"],"metadata":{"id":"Xf2dD7QBz9XP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train_multiclass = to_categorical(y_train['SubType'], num_classes=4)\n","y_test_multiclass = to_categorical(y_test['SubType'], num_classes=4)"],"metadata":{"id":"sv_mRSpWz9Zi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=30,\n","                                                     #monitor=['val_Output_layer_binary_loss', 'val_Output_layer_multi_loss'],\n","                                                     restore_best_weights=True,\n","                                                     start_from_epoch=20,\n","                                                     verbose=1)\n","\n","checkpoint_cb = tf.keras.callbacks.ModelCheckpoint('checkpoints', save_best_only=True,\n","                                                   save_weights_only=True, verbose=1)"],"metadata":{"id":"R11JApUSz9b1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input = Input(shape=(52,))\n","\n","hidden1 = Dense(512, kernel_initializer='he_normal')(input)\n","BN_1 = BatchNormalization()(hidden1)\n","act1 = Activation('relu')(BN_1)\n","\n","hidden2 = Dense(256, kernel_initializer='he_normal')(act1)\n","BN_2 = BatchNormalization()(hidden2)\n","act2 = Activation('relu')(BN_2)\n","\n","hidden3 = Dense(128, kernel_initializer='he_normal')(act2)\n","BN_3 = BatchNormalization()(hidden3)\n","act3 = Activation('relu')(BN_3)\n","\n","hidden4 = Dense(64, kernel_initializer='he_normal')(act3)\n","BN_4 = BatchNormalization()(hidden4)\n","act4 = Activation('relu')(BN_4)\n","\n","hidden5 = Dense(32, kernel_initializer='he_normal')(act4)\n","BN_5 = BatchNormalization()(hidden5)\n","act5 = Activation('relu')(BN_5)\n","\n","hidden6 = Dense(16, kernel_initializer='he_normal')(act5)\n","BN_6 = BatchNormalization()(hidden6)\n","act6 = Activation('relu')(BN_6)\n","\n","output1 = Dense(4, activation='linear', name='Output_layer_multi')(act6)\n","output2 = Dense(1, activation='sigmoid', name='Output_layer_binary')(act6)\n","\n","model = tf.keras.Model(inputs=[input], outputs=[output1, output2])"],"metadata":{"id":"dMvVkrUtz9eS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["opt = tf.keras.optimizers.Adam()\n","loss1 = tf.keras.losses.CategoricalCrossentropy(from_logits=True)\n","loss2 = tf.keras.losses.BinaryCrossentropy()\n","metrics = {\n","    'Output_layer_multi': [Recall(name='recall_multiclass'), Precision(name='precision_multiclass'), AUC(name='row_auc')],\n","    'Output_layer_binary': [Recall(name='recall_binary'), Precision(name='precision_binary')]\n","}\n","target_data = {\n","    'Output_layer_multi': y_train_multiclass,\n","    'Output_layer_binary': y_train['Label']\n","}\n","model.compile(\n","    loss={'Output_layer_multi': loss1, 'Output_layer_binary': loss2},\n","    optimizer=opt,\n","    metrics=metrics\n",")"],"metadata":{"id":"7Wtdq5Z_z9gh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model.fit(x_train_feats, target_data,\n","          epochs=1000, validation_split=.2,\n","          callbacks=[early_stopping_cb, checkpoint_cb])"],"metadata":{"id":"WTO272l-z9i8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss = pd.DataFrame(history.history)[['Output_layer_multi_loss',\n","                                      'Output_layer_binary_loss',\n","                                      'val_Output_layer_multi_loss',\n","                                      'val_Output_layer_binary_loss']]\n","\n","recall = pd.DataFrame(history.history)[['Output_layer_multi_recall_multiclass',\n","                                        'Output_layer_binary_recall_binary',\n","                                        'val_Output_layer_multi_recall_multiclass',\n","                                        'val_Output_layer_binary_recall_binary']]\n","\n","precision = pd.DataFrame(history.history)[['Output_layer_multi_precision_multiclass',\n","                                           'Output_layer_binary_precision_binary',\n","                                           'val_Output_layer_multi_precision_multiclass',\n","                                           'val_Output_layer_binary_precision_binary']]"],"metadata":{"id":"rBsCNArtz9lT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame(loss).plot(figsize=(8, 5), grid=True,\n","                        style=['r--', 'r', 'b-', 'b-*'], xlabel='Epoch')\n","plt.show()"],"metadata":{"id":"tn4JJ9kXz9nw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame(recall).plot(figsize=(8, 5), grid=True,\n","                        style=['r--', 'r', 'b--', 'b-*'], xlabel='Epoch')\n","plt.show()"],"metadata":{"id":"v5MMCH_Hz9qF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame(precision).plot(figsize=(8, 5), grid=True,\n","                        style=['r--', 'r', 'b--', 'b-*'], xlabel='Epoch')\n","plt.show()"],"metadata":{"id":"DL4hrFjQz9sO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preds = model.predict(x_test_feats)"],"metadata":{"id":"PwyKdG81z9um"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["subtype_preds = np.argmax(preds[0], axis=1)\n","label_preds = np.where(preds[1] > .5, 1, 0)"],"metadata":{"id":"mkXZeT4k0i_0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["subtype_cr = classification_report(y_test.iloc[:, 0], subtype_preds)\n","label_cr = classification_report(y_test.iloc[:, 1], label_preds)"],"metadata":{"id":"LD6JoSAk0jGy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(subtype_cr)"],"metadata":{"id":"UbpKzyQ-0jJJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(x_test_feats, (y_test_multiclass, y_test['Label']))[0]"],"metadata":{"id":"GCQMfzRR0jLd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(x_test_feats, (y_test_multiclass, y_test['Label']))"],"metadata":{"id":"FfDMKp7u0jNw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loc = 5074\n","x_new = x_test_feats.iloc[[loc]]\n","y_new = y_test.iloc[[loc]]"],"metadata":{"id":"W_Q9hf5t0jQN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_new"],"metadata":{"id":"nBvcKukM0jSd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_new"],"metadata":{"id":"gCaux9KB0jUl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred_tst = model.predict(x_test_feats.iloc[[loc]])\n","pred_tst"],"metadata":{"id":"t1-JpmJR0jW2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","model.save('nn.h5')"],"metadata":{"id":"QNq4Hy5C0rHx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LFN0Rdr40rJ_"},"execution_count":null,"outputs":[]}]}